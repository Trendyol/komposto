name: Publish
on:
  release:
    types: [released, prereleased]

jobs:
  publish:
    name: Release build and publish
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 21
          
      - name: Extract version from tag
        id: get_version
        run: echo "KOMPOSTO_RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Publish to MavenCentral
        run: ./gradlew publishAndReleaseToMavenCentral --no-configuration-cache
        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}
          ORG_GRADLE_PROJECT_signingInMemoryKeyId: ${{ secrets.SIGNING_KEY_ID }}
          ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.SIGNING_PASSWORD }}
          ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.GPG_KEY_CONTENTS }}
          RELEASE_VERSION: ${{ env.KOMPOSTO_RELEASE_VERSION }}
#  dokka:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#      - name: Set up JDK 21
#        uses: actions/setup-java@v4
#        with:
#          distribution: 'temurin'
#          java-version: '21'
#          cache: gradle
#      - name: Generate documentation
#        run: |
#          ./gradlew dokkaHtmlMultiModule
#          mkdir -p htmlMultiModule
#          mv build/dokka/htmlMultiModule/* htmlMultiModule/
#      - name: Upload documentation
#        uses: actions/upload-artifact@v4
#        with:
#          name: dokka-docs
#          path: htmlMultiModule/
#  pages:
#    runs-on: ubuntu-latest
#    needs: [dokka]
#    steps:
#      - uses: actions/checkout@v4
#      - name: Download dokka docs
#        uses: actions/download-artifact@v4
#        with:
#          name: dokka-docs
#          path: htmlMultiModule
#      - name: Set up Ruby
#        uses: ruby/setup-ruby@v1
#        with:
#          ruby-version: '3.2'
#          bundler-cache: true
#      - name: Build Pages
#        run: |
#          gem install bundler
#          bundle install
#          bundle exec jekyll build -s htmlMultiModule -d public
#      - name: Deploy to GitHub Pages
#        uses: peaceiris/actions-gh-pages@v3
#        with:
#          github_token: ${{ secrets.GITHUB_TOKEN }}
#          publish_dir: ./public
  announce:
    runs-on: ubuntu-latest
#    needs: [ pages, publish ]
    needs: [publish]
    steps:
      - name: Get Release Info
        id: release-info
        run: |
          RELEASE_INFO=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/${{ github.event.release.id }}")

          RELEASE_TAG=$(echo "$RELEASE_INFO" | jq -r '.tag_name')
          RELEASE_DATE=$(echo "$RELEASE_INFO" | jq -r '.published_at' | cut -d'T' -f1)
          RELEASE_BODY=$(echo "$RELEASE_INFO" | jq -r '.body')

          echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_ENV
          echo "RELEASE_DATE=$RELEASE_DATE" >> $GITHUB_ENV
          echo "RELEASE_BODY<<EOF" >> $GITHUB_ENV
          echo "$RELEASE_BODY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Send detailed message to Slack
        if: success()
        uses: slackapi/slack-github-action@v2.1.0
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: |
            channel: ${{ secrets.SLACK_DEV_CHANNEL_ID }}
            text: |
              Komposto new version deployed. :checkmark:
              [${{ env.RELEASE_TAG }}] - ${{ env.RELEASE_DATE }}
              ${{ env.RELEASE_BODY }}

              For more details: ${{ github.event.release.html_url }}